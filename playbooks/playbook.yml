#
# Copyright (C) 2022
#
# This file is part of ETHERNITY NODE.
#
# ETHERNITY SC is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Version 20220201_1146
# Target OS Ubuntu 20.04

- name: Ethernity NODE 
  hosts: all
  connection: local
  become: yes
  gather_facts: yes
  roles:
    - role: crivetimihai.virtualization.kvm
    - role: crivetimihai.virtualization.vagrant
    - role: uoi-io.libvirt
      libvirt_firewalld: false
      libvirt_selinux: false
      libvirt_config:
        - { option: 'listen_tls', value: 'listen_tls = 0' }
        - { option: 'listen_tcp', value: 'listen_tcp = 0' }
      libvirt_qemu_config:
        - { option: 'user', value: 'user = "+0"' }
        - { option: 'cgroup_device_acl', value: 'cgroup_device_acl = [ "/dev/null", "/dev/full", "/dev/zero", "/dev/random", "/dev/urandom", "/dev/ptmx", "/dev/kvm", "/dev/kqemu", "/dev/rtc", "/dev/hpet", "/dev/sgx_virt", "/dev/sgx_enclave", "/dev/sgx_provision", "/dev/sgx_vepc" ]' }
  tasks:
  - name: "AppArmor - enable sgx support for libvirt qemu TEMPLATE"
    ansible.builtin.copy:
      src: files/etc/apparmor.d/libvirt/TEMPLATE.qemu
      dest: /etc/apparmor.d/libvirt/TEMPLATE.qemu
  - name: "AppArmor - enable sgx support for libvirt qemu at /usr/local/bin"
    ansible.builtin.copy:
      src: files/etc/apparmor.d/local/usr.sbin.libvirtd
      dest: /etc/apparmor.d/local/usr.sbin.libvirtd
  - name: "Distr qemu - remove"
    ansible.builtin.apt:
      pkg:
      - qemu-kvm
      - qemu-utils
      - qemu-system-x86
      - qemu-system-common
      - qemu-block-extra
      - libcacard0
      - qemu-user-binfmt
      - qemu-user
      state: absent
  - name: "Remove unused packages"
    ansible.builtin.apt:
      autoremove: yes
  - name: "Qemu SGX - install"
    ansible.builtin.apt:
      pkg:    
       qemu-sgx
      update_cache: yes
  - name: "Vagrant-libvirt package dependencies - install"
    ansible.builtin.apt:
      pkg:
      - ebtables
      - dnsmasq-base
      - libxslt-dev
      - libxslt1-dev
      - libxml2-dev
      - libvirt-dev
      - zlib1g-dev
      - ruby-dev
#  - name: "Add an apt signing key for vagrant-repository"
#    ansible.builtin.apt_key:
#      url: https://apt.releases.hashicorp.com/gpg
#  - name: "Vagrant-repository - install"
#    ansible.builtin.apt_repository:
#      repo: "deb [arch=amd64] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
#  - name: "Vargant - remove old vagrant installed by role crivetimihai.virtualization.vagrant"
#    ansible.builtin.apt:
#      pkg:
#      - vagrant
#      state: absent
#  - name: "Vargant - install the latest version"
#    ansible.builtin.apt:
#      pkg:
#      - vagrant
  - name: "Dev-tools - install"
    ansible.builtin.apt:
      pkg:
      - ubuntu-dev-tools
  - name: "Vagrant-libvirt - install"
    ansible.builtin.shell: vagrant plugin install vagrant-libvirt
  - name: "Vagrant-preload - install"
    ansible.builtin.shell: vagrant plugin install vagrant-reload
  - name: "Dev-tools - remove"
    ansible.builtin.apt:
      pkg:
      - ubuntu-dev-tools
      state: absent
  - name: "AppArmor profile - reload"
    ansible.builtin.shell: sudo apparmor_parser -r /etc/apparmor.d/usr.sbin.libvirtd
  - name: "Vagrant - cleanup VM"
    ansible.builtin.shell: vagrant destroy -f
  - name: "Vagrant - provision VM"
    ansible.builtin.shell: vagrant up --provider=libvirt
  - name: "Startup - set etny-vagrant configuration"
    ansible.builtin.shell: echo "ETNY_PATH=${PWD}" > /etc/default/etny-vagrant
  - name: "Startup - create etny-vagrant.service"
    ansible.builtin.copy:
      src: files/etc/systemd/system/etny-vagrant.service
      dest: /etc/systemd/system/etny-vagrant.service
  - name: "Startup - enable etny-vagrant.service"
    ansible.builtin.shell: systemctl enable etny-vagrant.service
  - name: "Startup - start etny-vagrant.service"
    ansible.builtin.shell: systemctl restart etny-vagrant.service
  - name: "Finish"
    ansible.builtin.debug:
      msg: Ethernity NODE installation successful
